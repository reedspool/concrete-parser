#+TITLE: Block
#+PROPERTY: header-args    :comments both :tangle ../src/Block.js

A block is just a wrapper around a lexical token with a category.

A category helps the interpreter know what to do with the block.

#+begin_src js
export const Category = {
    Value: {},
    Op: {}
};
#+end_src

Automated additions to category.

Each category has a name so a block can test whether that is its category.

#+begin_src js
Object.entries(Category).forEach(([ name, value ]) => {
    value.name = name;
});
#+end_src

There are two categories of blocks, "value" and "op". The distinction is that values become arguments when executed, whereas ops do anything and everything else a program can do.

#+begin_src js
export const ValueBlock = (token) => new _Block(token, Category.Value);
export const OpBlock = (token) => new _Block(token, Category.Op);
#+end_src

#+begin_src js
class _Block {
    constructor(token, category) {
        this.token = token;
        this.category = category;
    }
#+end_src

We want to easily check which category a block belongs to, e.g. =myBlock.is(Category.Value)=.

#+begin_src js
    is(category) { return this.category.name == category.name; }
}
#+end_src

A tape is a container of blocks. It is always of category "Value".

#+begin_src js
export const Tape = (...args) => new _Tape(...args);
#+end_src

#+begin_src js
class _Tape {
    constructor (isInline, params = []) {
        this.cells = [];
        this.commas = {};
        this.params = params;
        this.labelsByIndex = [];
        this.labelsToIndex = {};
        this.isInline = isInline;
        this.category = Category.Value;
    }
    
    is(category) { return this.category.name == category.name; }

    append (block) {
        this.cells.push(block);
    }

    appendComma () {
        this.commas[this.cells.length] = true;
    }

    setLabel (token, index) {
        this.labelsByIndex[index] = token.original;
        this.labelsToIndex[token.original] = index;
    }
}
#+end_src
