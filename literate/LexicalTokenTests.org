#+TITLE: Lexical Token Tests
#+PROPERTY: header-args    :comments both :tangle ../test/LexicalToken.test.js

* Preamble

#+begin_src js
import { Token } from "../src/LexicalToken.js";
#+end_src

* ValueIdentifier

#+begin_src js
it("Simple ValueIdentifier", () => {
    expect(Token.ValueIdentifier("abcd").finalize()).toEqual({
        kind: "ValueIdentifier",
        type: Token.ValueIdentifier.event,
        original: "abcd",
        identifier: "abcd"
    })
})

it("ValueIdentifier can be added to", () => {
    const token = Token.ValueIdentifier("a");
    token.push("b");
    token.finalize();
    expect(token).toEqual({
        kind: "ValueIdentifier",
        type: Token.ValueIdentifier.event,
        original: "ab",
        identifier: "ab"
    })
})
#+end_src
* CallIdentifier

#+begin_src js
it("Simple CallIdentifier", () => {
    expect(Token.CallIdentifier("abcd!").finalize()).toEqual({
        kind: "CallIdentifier",
        type: Token.CallIdentifier.event,
        original: "abcd!",
        identifier: "abcd"
    })
})
#+end_src

* AddressIdentifier

#+begin_src js
it("Simple AddressIdentifier", () => {
    expect(Token.AddressIdentifier("@abcd").finalize()).toEqual({
        kind: "AddressIdentifier",
        type: Token.AddressIdentifier.event,
        original: "@abcd",
        identifier: "abcd"
    })
})
#+end_src

* LabelIdentifier

#+begin_src js
it("Simple LabelIdentifier", () => {
    expect(Token.LabelIdentifier("abcd:").finalize()).toEqual({
        kind: "LabelIdentifier",
        type: Token.LabelIdentifier.event,
        original: "abcd:",
        identifier: "abcd"
    })
});
#+end_src
* Blank

#+begin_src js
it("Blank", () => {
    expect(Token.Blank()).toEqual({
        kind: "Blank",
        type: Token.Blank.event,
        original: "_"
    })
})

it("Blank can NOT be added to", () => {
    const token = Token.Blank();
    expect(() => token.push("a")).toThrowError();
})
#+end_src
* Number

#+begin_src js
it("Number", () => {
    expect(Token.Number("1")).toEqual({
        kind: "Number",
        type: Token.Number.event,
        original: "1"
    })
})

it("Number can be added to", () => {
    const token = Token.Number("0");
    token.push("1");
    expect(token).toEqual({
        kind: "Number",
        type: Token.Number.event,
        original: "01"
    })
})
#+end_src
