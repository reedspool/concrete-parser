#+TITLE: Lexical Token Tests
#+PROPERTY: header-args    :comments both :tangle ../test/LexicalToken.test.js

* Preamble

#+begin_src js
import { Token } from "../src/LexicalToken.js";
#+end_src

* ValueIdentifier

#+begin_src js
it("Simple ValueIdentifier", () => {
    expect(Token.ValueIdentifier.create("abcd")).toEqual({
        name: "ValueIdentifier",
        type: Token.ValueIdentifier.event,
        original: "abcd"
    })
})

it("ValueIdentifier can be added to", () => {
    const token = Token.ValueIdentifier.create("a");
    token.push("b");
    expect(token).toEqual({
        name: "ValueIdentifier",
        type: Token.ValueIdentifier.event,
        original: "ab"
    })
})
#+end_src

* Blank

#+begin_src js
it("Blank", () => {
    expect(Token.Blank.create()).toEqual({
        name: "Blank",
        type: Token.Blank.event,
        original: "_"
    })
})

it("Blank can NOT be added to", () => {
    const token = Token.Blank.create();
    expect(() => token.push("a")).toThrowError();
})
#+end_src
* Number

#+begin_src js
it("Number", () => {
    expect(Token.Number.create("1")).toEqual({
        name: "Number",
        type: Token.Number.event,
        original: "1"
    })
})

it("Number can be added to", () => {
    const token = Token.Number.create("0");
    token.push("1");
    expect(token).toEqual({
        name: "Number",
        type: Token.Number.event,
        original: "01"
    })
})
#+end_src
